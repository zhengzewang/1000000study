package com.zzw.java1000000.z1008289.operator.bitwise;

public class BitwiseDemo {
	
	public static void main(String[] args) {
		int a = 30; //原码：00000000 00000000 00000000 00011110 补码：00000000 00000000 00000000 00011110
		int b = -25;//原码：10000000 00000000 00000000 00011001 补码：11111111 11111111 11111111 11100111（对应的正数取反+1）
		char c = 'a';//97=01100001（正数的补码等于原码）
		char d = 'b';//98=01100010
		
		long l = -40;
		//原码：10000000 00000000 00000000 00000000 00000000 00000000 00000000 00101000
		//补码：11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011000
		
		//按位与
		System.out.println(a & b);//补码：00000000 00000000 00000000 00000110原码：00000000 00000000 00000000 00000110 = 6
		System.out.println(c & d);//01100000 = 96
		
		//按位或
		System.out.println(a | b);//补码：11111111 11111111 11111111 11111111 原码：100000000 00000000 00000000 00000001 = -1
		System.out.println(c | d);//补码：01100011 = 99
		
		//按位异或：如果想对应为值相同，则结果为0，否为为1
		System.out.println(a ^ b);//补码：11111111 11111111 11111111 11111001 原码：100000000 00000000 00000000 00000111 = -7
		System.out.println(c ^ d);//00000011 = 3
		
		//按位取反
		System.out.println(~a);//补码：11111111 11111111 11111111 11100001 原码：10000000 00000000 00000000 00011111 = -31
		System.out.println(~b);//补码：00000000 00000000 00000000 00011000 原码：同补码 = 24
		
		//左移右移
		System.out.println(a<<2);//1111000=120
		System.out.println(b>>2);//补码：11111111 11111111 11111111 11111001 原码：10000000 00000000 00000000 00000110 = -7
		System.out.println(c<<1);//11000000 = 194
		System.out.println(d>>2);//00011000 = 24
		
		//无符号右移动
		System.out.println(a>>>2);//00000011 = 3
		System.out.println(b>>>3);//补码：00011111 11111111 11111111 11111100 原码：00011111 11111111 11111111 11111100 = 536870908
		
		//精度不同
		int e = (int) (b&l);
		//11111111 11111111 11111111 11111111 11111111 11111111 11111111 11100111 (b)
		//11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011000 (l)
		//11111111 11111111 11111111 11111111 11111111 11111111 11111111 11000000 (补码)
		//10000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 (原码)result = -64
		System.out.println(e);
		long f = a|l;
		//00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011110 (a)
		//11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011000 (l)
		//11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011110 (补码)
		//10000000 00000000 00000000 00000000 00000000 00000000 00000000 00100010 (原码)result = -34
		System.out.println(f);
	}

}
